{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { SignalrService } from './SignalrService';\nlet FetchDataComponent = class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.scenes = [];\n    this.feed = [];\n    this.IsBeat = false;\n    this.values = '';\n    this.BeatColor = '#F44336';\n    this.NonBeatColor = '#FF0000';\n    this.Color = '#000000';\n    this.isBeatChanged = new EventEmitter();\n    http.get('https://localhost:7133/' + 'scenes').subscribe(result => {\n      this.scenes = result;\n    }, error => console.error(error));\n    var signalR = new SignalrService();\n    signalR.startConnection().then(() => {\n      signalR.listenToAllFeeds();\n    });\n    const subscriber = {\n      next: trackInfo => {\n        console.log('Received TrackInfo:', trackInfo);\n        this.feed.push(trackInfo);\n        this.IsBeat = trackInfo.isBeat;\n        if (this.IsBeat) {\n          this.isBeatChanged.emit(\"Y\");\n          this.values = \"Y\";\n          this.Color = this.BeatColor;\n        } else {\n          this.isBeatChanged.emit(\"N\");\n          this.values = \"N\";\n          this.Color = this.NonBeatColor;\n        }\n      },\n      error: function (err) {\n        console.log('Error');\n      },\n      complete: function () {\n        console.log('Done');\n      }\n    };\n    this.allFeedSubscription = signalR.AllFeedObservable.subscribe(subscriber);\n  }\n};\n__decorate([Output()], FetchDataComponent.prototype, \"isBeatChanged\", void 0);\nFetchDataComponent = __decorate([Component({\n  selector: 'app-fetch-data',\n  templateUrl: './fetch-data.component.html'\n}), __param(1, Inject('BASE_URL'))], FetchDataComponent);\nexport { FetchDataComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,MAAM,EAAEC,MAAM,QAAQ,eAAe;AAKvE,SAASC,cAAc,QAAmB,kBAAkB;AAOrD,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAW7BC,YAAYC,IAAgB,EAAsBC,OAAe;IAV1D,WAAM,GAAiB,EAAE;IAEhC,SAAI,GAAgB,EAAE;IACtB,WAAM,GAAY,KAAK;IACvB,WAAM,GAAG,EAAE;IACX,cAAS,GAAG,SAAS;IACrB,iBAAY,GAAG,SAAS;IACxB,UAAK,GAAE,SAAS;IACN,kBAAa,GAAG,IAAIP,YAAY,EAAU;IAGlDM,IAAI,CAACE,GAAG,CAAe,yBAAyB,GAAG,QAAQ,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;MAC9E,IAAI,CAACC,MAAM,GAAGD,MAAM;IACtB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IAEjC,IAAIE,OAAO,GAAG,IAAIX,cAAc,EAAE;IAClCW,OAAO,CAACC,eAAe,EAAE,CAACC,IAAI,CAAC,MAAK;MAClCF,OAAO,CAACG,gBAAgB,EAAE;IAC5B,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAiC;MAC/CC,IAAI,EAAGC,SAAoB,IAAI;QAC7BP,OAAO,CAACQ,GAAG,CAAC,qBAAqB,EAAED,SAAS,CAAC;QAC7C,IAAI,CAACE,IAAI,CAACC,IAAI,CAACH,SAAS,CAAC;QACzB,IAAI,CAACI,MAAM,GAAGJ,SAAS,CAACK,MAAM;QAC9B,IAAI,IAAI,CAACD,MAAM,EAAE;UACf,IAAI,CAACE,aAAa,CAACC,IAAI,CAAC,GAAG,CAAC;UAC5B,IAAI,CAACC,MAAM,GAAG,GAAG;UACjB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,SAAS;SAC5B,MACI;UACH,IAAI,CAACJ,aAAa,CAACC,IAAI,CAAC,GAAG,CAAC;UAC5B,IAAI,CAACC,MAAM,GAAG,GAAG;UACjB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACE,YAAY;;MAElC,CAAC;MACDnB,KAAK,EAAE,UAAUoB,GAAQ;QACvBnB,OAAO,CAACQ,GAAG,CAAC,OAAO,CAAC;MACtB,CAAC;MACDY,QAAQ,EAAE;QACRpB,OAAO,CAACQ,GAAG,CAAC,MAAM,CAAC;MACrB;KACD;IAED,IAAI,CAACa,mBAAmB,GAAGpB,OAAO,CAACqB,iBAAiB,CACjD1B,SAAS,CAACS,UAAU,CAAC;EAE1B;CACD;AAxCWkB,YAATlC,MAAM,EAAE,yDAA4C;AAT1CE,kBAAkB,eAJ9BL,SAAS,CAAC;EACTsC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE;CACd,CAAC,EAY+BC,iBAAM,CAAC,UAAU,CAAC,IAXtCnC,kBAAkB,CAiD9B;SAjDYA,kBAAkB","names":["Component","EventEmitter","Inject","Output","SignalrService","FetchDataComponent","constructor","http","baseUrl","get","subscribe","result","scenes","error","console","signalR","startConnection","then","listenToAllFeeds","subscriber","next","trackInfo","log","feed","push","IsBeat","isBeat","isBeatChanged","emit","values","Color","BeatColor","NonBeatColor","err","complete","allFeedSubscription","AllFeedObservable","__decorate","selector","templateUrl","__param"],"sourceRoot":"","sources":["C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HubConnectionBuilder, IStreamSubscriber } from '@microsoft/signalr';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { SignalrService, TrackInfo } from './SignalrService';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public scenes: SceneModel[] = [];\r\n  allFeedSubscription: any;\r\n  feed: TrackInfo[] = [];\r\n  IsBeat: boolean = false;\r\n  values = '';\r\n  BeatColor = '#F44336';\r\n  NonBeatColor = '#FF0000';\r\n  Color ='#000000'\r\n  @Output() isBeatChanged = new EventEmitter<string>();\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<SceneModel[]>('https://localhost:7133/' + 'scenes').subscribe(result => {\r\n      this.scenes = result;\r\n    }, error => console.error(error));\r\n\r\n    var signalR = new SignalrService();\r\n    signalR.startConnection().then(() => {\r\n      signalR.listenToAllFeeds();\r\n    });\r\n\r\n    const subscriber: IStreamSubscriber<TrackInfo> = {\r\n      next: (trackInfo: TrackInfo) => {\r\n        console.log('Received TrackInfo:', trackInfo);\r\n        this.feed.push(trackInfo);\r\n        this.IsBeat = trackInfo.isBeat;\r\n        if (this.IsBeat) {\r\n          this.isBeatChanged.emit(\"Y\");\r\n          this.values = \"Y\";\r\n          this.Color = this.BeatColor;\r\n        }\r\n        else {\r\n          this.isBeatChanged.emit(\"N\");\r\n          this.values = \"N\";\r\n          this.Color = this.NonBeatColor;\r\n        }\r\n      },\r\n      error: function (err: any): void {\r\n        console.log('Error');\r\n      },\r\n      complete: function (): void {\r\n        console.log('Done');\r\n      }\r\n    };\r\n\r\n    this.allFeedSubscription = signalR.AllFeedObservable\r\n      .subscribe(subscriber);\r\n\r\n  }\r\n}\r\n\r\ninterface SceneModel {\r\n\r\n  name: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}