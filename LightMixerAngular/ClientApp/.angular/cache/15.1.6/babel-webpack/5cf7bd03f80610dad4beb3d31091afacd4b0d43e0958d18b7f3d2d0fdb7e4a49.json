{"ast":null,"code":"import { HubConnectionBuilder, Subject } from '@microsoft/signalr';\nclass TrackInfo {\n  constructor() {\n    this.IsBeat = false;\n  }\n}\nexport class SignalrService {\n  constructor() {\n    this.$allFeed = new Subject();\n  }\n  /*public startConnection2() {\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n      .withUrl('https://localhost:7133/hub', {\r\n        skipNegotiation: true,\r\n        transport: signalR.HttpTransportType.WebSockets\r\n      })\r\n      .withAutomaticReconnect()\r\n      .build();\r\n    \r\n    connection.start()\r\n      .then(() => {\r\n        console.log(\"connection established\");\r\n    \r\n      })\r\n      .catch((err: any) => {\r\n        console.log(\"error occured\" + err);\r\n          });\r\n  }*/\n  startConnection() {\n    return new Promise((resolve, reject) => {\n      this.hubConnection = new HubConnectionBuilder().withUrl(\"https://localhost:7133/hub\").build();\n      this.hubConnection.start().then(() => {\n        console.log(\"connection established\");\n        return resolve(true);\n      }).catch(err => {\n        console.log(\"error occured\" + err);\n        reject(err);\n      });\n    });\n  }\n  listenToAllFeeds() {\n    this.hubConnection.on(\"GetFeed\", data => {\n      this.$allFeed.next(data);\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAwBA,oBAAoB,EAAEC,OAAO,QAAQ,oBAAoB;AAGjF,MAAMC,SAAS;EAAfC;IAEE,WAAM,GAAY,KAAK;EACzB;;AAEA,OAAM,MAAOC,cAAc;EAA3BD;IAGU,aAAQ,GAAuB,IAAIF,OAAO,EAAa;EA+CjE;EA9CE;;;;;;;;;;;;;;;;;;EAuBOI,eAAe;IACpB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACC,aAAa,GAAG,IAAIT,oBAAoB,EAAE,CAC5CU,OAAO,CAAC,4BAA4B,CAAC,CAACC,KAAK,EAAE;MAEhD,IAAI,CAACF,aAAa,CAACG,KAAK,EAAE,CACvBC,IAAI,CAAC,MAAK;QAETC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC,OAAOR,OAAO,CAAC,IAAI,CAAC;MACtB,CAAC,CAAC,CACDS,KAAK,CAAEC,GAAQ,IAAI;QAClBH,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGE,GAAG,CAAC;QAClCT,MAAM,CAACS,GAAG,CAAC;MACb,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;EAEOC,gBAAgB;IACL,IAAI,CAACT,aAAc,CAACU,EAAE,CAAC,SAAS,EAAGC,IAAe,IAAI;MACpE,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,IAAI,CAAC;IAC1B,CAAC,CAAC;EACJ","names":["HubConnectionBuilder","Subject","TrackInfo","constructor","SignalrService","startConnection","Promise","resolve","reject","hubConnection","withUrl","build","start","then","console","log","catch","err","listenToAllFeeds","on","data","$allFeed","next"],"sourceRoot":"","sources":["C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\fetch-data\\SignalrService.ts"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { HubConnection, HubConnectionBuilder, Subject } from '@microsoft/signalr';\r\n\r\n\r\nclass TrackInfo\r\n{\r\n  IsBeat: boolean = false;\r\n}\r\n\r\nexport class SignalrService {\r\n\r\n  private hubConnection: any;\r\n  private $allFeed: Subject<TrackInfo> = new Subject<TrackInfo>();\r\n  /*public startConnection2() {\r\n\r\n    this.connection = new signalR.HubConnectionBuilder()\r\n      .withUrl('https://localhost:7133/hub', {\r\n        skipNegotiation: true,\r\n        transport: signalR.HttpTransportType.WebSockets\r\n      })\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n\r\n    connection.start()\r\n      .then(() => {\r\n        console.log(\"connection established\");\r\n\r\n\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(\"error occured\" + err);\r\n\r\n      });\r\n  }*/\r\n\r\n  public startConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      this.hubConnection = new HubConnectionBuilder()\r\n        .withUrl(\"https://localhost:7133/hub\").build();\r\n\r\n      this.hubConnection.start()\r\n        .then(() => {\r\n          \r\n          console.log(\"connection established\");\r\n          return resolve(true);\r\n        })\r\n        .catch((err: any) => {\r\n          console.log(\"error occured\" + err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  public listenToAllFeeds() {\r\n    (<HubConnection>this.hubConnection).on(\"GetFeed\", (data: TrackInfo) => {\r\n      this.$allFeed.next(data);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}