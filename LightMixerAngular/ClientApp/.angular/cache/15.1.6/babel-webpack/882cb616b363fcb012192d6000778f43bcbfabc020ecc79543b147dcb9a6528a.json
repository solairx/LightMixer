{"ast":null,"code":"import { SignalrService } from './SignalrService';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nfunction FetchDataComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FetchDataComponent_table_5_tr_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const scene_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(scene_r6.name);\n  }\n}\nfunction FetchDataComponent_table_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 5)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Name\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"tbody\");\n    i0.ɵɵtemplate(6, FetchDataComponent_table_5_tr_6_Template, 3, 1, \"tr\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.scenes);\n  }\n}\nconst _c0 = function (a1) {\n  return [\"/groups\", a1];\n};\nfunction FetchDataComponent_ng_container_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9)(2, \"p\", 10);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"a\", 11);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 12)(9, \"p\", 10);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const f_r8 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", f_r8.author, \" posted in \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(8, _c0, f_r8.groupName));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(f_r8.groupName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" on \", i0.ɵɵpipeBind2(7, 5, f_r8.created, \"MM/dd/yyyy\"), \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(f_r8.IsBeat);\n  }\n}\nfunction FetchDataComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FetchDataComponent_ng_container_6_div_1_Template, 11, 10, \"div\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.feed);\n  }\n}\nfunction FetchDataComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No Feed yet.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.scenes = [];\n    this.feed = [];\n    http.get('https://localhost:7133/' + 'scenes').subscribe(result => {\n      this.scenes = result;\n    }, error => console.error(error));\n    var signalR = new SignalrService();\n    signalR.startConnection().then(() => {\n      signalR.listenToAllFeeds();\n    });\n    const subscriber = {\n      next: trackInfo => {\n        console.log('Received TrackInfo:', trackInfo);\n        this.feed.push(trackInfo);\n      },\n      error: function (err) {\n        console.log('Error');\n      },\n      complete: function () {\n        console.log('Done');\n      }\n    };\n    this.allFeedSubscription = signalR.AllFeedObservable.subscribe(subscriber);\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 9,\n  vars: 4,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [4, \"ngIf\", \"ngIfElse\"], [\"feedEmpty\", \"\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"card rounded-0 my-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\", \"rounded-0\", \"my-2\"], [1, \"card-header\", \"bg-transparent\"], [1, \"card-text\"], [3, \"routerLink\"], [1, \"card-body\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Weather forecast\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, FetchDataComponent_p_4_Template, 3, 0, \"p\", 1);\n      i0.ɵɵtemplate(5, FetchDataComponent_table_5_Template, 7, 1, \"table\", 2);\n      i0.ɵɵtemplate(6, FetchDataComponent_ng_container_6_Template, 2, 1, \"ng-container\", 3);\n      i0.ɵɵtemplate(7, FetchDataComponent_ng_template_7_Template, 2, 0, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(8);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.scenes == null ? null : ctx.scenes.length));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.scenes.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.feed.length > 0)(\"ngIfElse\", _r3);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.RouterLink, i2.DatePipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAKA,SAASA,cAAc,QAAmB,kBAAkB;;;;;;;ICD5DC,yBAA2B;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAS1CA,0BAAiC;IAC3BA,YAAgB;IAAAA,iBAAK;;;;IAArBA,eAAgB;IAAhBA,mCAAgB;;;;;IAR1BA,gCAAsF;IAG5EA,oBAAI;IAAAA,iBAAK;IAGjBA,6BAAO;IACLA,yEAEK;IACPA,iBAAQ;;;;IAHgBA,eAAS;IAATA,uCAAS;;;;;;;;IAMjCA,8BAAwD;IAGlDA,YACA;IAAAA,6BAA0C;IAAAA,YAAiB;IAAAA,iBAAI;IAC/DA,YACF;;IAAAA,iBAAI;IAENA,+BAAuB;IACAA,aAAc;IAAAA,iBAAI;;;;IANrCA,eACA;IADAA,sDACA;IAAGA,eAAsC;IAAtCA,uEAAsC;IAACA,eAAiB;IAAjBA,oCAAiB;IAC3DA,eACF;IADEA,oFACF;IAGqBA,eAAc;IAAdA,iCAAc;;;;;IAVzCA,6BAAsD;IACpDA,oFAWM;IACRA,0BAAe;;;;IAZMA,eAAO;IAAPA,qCAAO;;;;;IAc1BA,yBAAG;IAAAA,4BAAY;IAAAA,iBAAI;;;ADrBrB,OAAM,MAAOC,kBAAkB;EAM7BC,YAAYC,IAAgB,EAAsBC,OAAe;IAL1D,WAAM,GAAiB,EAAE;IAEhC,SAAI,GAAgB,EAAE;IAIpBD,IAAI,CAACE,GAAG,CAAe,yBAAyB,GAAG,QAAQ,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;MAC9E,IAAI,CAACC,MAAM,GAAGD,MAAM;IACtB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IAEjC,IAAIE,OAAO,GAAG,IAAIZ,cAAc,EAAE;IAClCY,OAAO,CAACC,eAAe,EAAE,CAACC,IAAI,CAAC,MAAK;MAClCF,OAAO,CAACG,gBAAgB,EAAE;IAC5B,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAiC;MAC/CC,IAAI,EAAGC,SAAoB,IAAI;QAC7BP,OAAO,CAACQ,GAAG,CAAC,qBAAqB,EAAED,SAAS,CAAC;QAC7C,IAAI,CAACE,IAAI,CAACC,IAAI,CAACH,SAAS,CAAC;MAC3B,CAAC;MACDR,KAAK,EAAE,UAAUY,GAAQ;QACvBX,OAAO,CAACQ,GAAG,CAAC,OAAO,CAAC;MACtB,CAAC;MACDI,QAAQ,EAAE;QACRZ,OAAO,CAACQ,GAAG,CAAC,MAAM,CAAC;MACrB;KACD;IAED,IAAI,CAACK,mBAAmB,GAAGZ,OAAO,CAACa,iBAAiB,CACjDlB,SAAS,CAACS,UAAU,CAAC;EAE1B;;AAhCWd,kBAAkB;mBAAlBA,kBAAkB,4DAMS,UAAU;AAAA;AANrCA,kBAAkB;QAAlBA,kBAAkB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ/B7B,6BAAoB;MAAAA,gCAAgB;MAAAA,iBAAK;MAEzCA,yBAAG;MAAAA,0EAA0D;MAAAA,iBAAI;MAEjEA,+DAAkD;MAElDA,uEAWQ;MACRA,qFAae;MACfA,oHAEc;;;;MA9BVA,eAAqB;MAArBA,uEAAqB;MAEwCA,eAAmB;MAAnBA,wCAAmB;MAYrEA,eAAuB;MAAvBA,0CAAuB","names":["SignalrService","i0","FetchDataComponent","constructor","http","baseUrl","get","subscribe","result","scenes","error","console","signalR","startConnection","then","listenToAllFeeds","subscriber","next","trackInfo","log","feed","push","err","complete","allFeedSubscription","AllFeedObservable","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts","C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HubConnectionBuilder, IStreamSubscriber } from '@microsoft/signalr';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { SignalrService, TrackInfo } from './SignalrService';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public scenes: SceneModel[] = [];\r\n  allFeedSubscription: any;\r\n  feed: TrackInfo[] = [];\r\n\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<SceneModel[]>('https://localhost:7133/' + 'scenes').subscribe(result => {\r\n      this.scenes = result;\r\n    }, error => console.error(error));\r\n\r\n    var signalR = new SignalrService();\r\n    signalR.startConnection().then(() => {\r\n      signalR.listenToAllFeeds();\r\n    });\r\n\r\n    const subscriber: IStreamSubscriber<TrackInfo> = {\r\n      next: (trackInfo: TrackInfo) => {\r\n        console.log('Received TrackInfo:', trackInfo);\r\n        this.feed.push(trackInfo);\r\n      },\r\n      error: function (err: any): void {\r\n        console.log('Error');\r\n      },\r\n      complete: function (): void {\r\n        console.log('Done');\r\n      }\r\n    };\r\n\r\n    this.allFeedSubscription = signalR.AllFeedObservable\r\n      .subscribe(subscriber);\r\n\r\n  }\r\n}\r\n\r\ninterface SceneModel {\r\n\r\n  name: string;\r\n}\r\n","<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!scenes?.length\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"scenes.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>Name</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let scene of scenes\">\r\n      <td>{{ scene.name }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<ng-container *ngIf=\"feed.length > 0; else feedEmpty\">\r\n  <div *ngFor=\"let f of feed\" class=\"card rounded-0 my-2\">\r\n    <div class=\"card-header bg-transparent\">\r\n      <p class=\"card-text\">\r\n        {{ f.author }} posted in\r\n        <a [routerLink]=\"['/groups',f.groupName]\">{{ f.groupName }}</a>\r\n        on {{ f.created | date:'MM/dd/yyyy' }}\r\n      </p>\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <p class=\"card-text\">{{ f.IsBeat }}</p>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n<ng-template #feedEmpty>\r\n  <p>No Feed yet.</p>\r\n</ng-template>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}