{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nimport { HubConnectionBuilder, Subject } from '@microsoft/signalr';\nimport { environment } from '../../environments/environment';\nexport class TrackInfo {\n  constructor() {\n    this.isBeat = false;\n    this.trackInfo = '';\n  }\n}\nexport class SignalrService {\n  constructor() {\n    this.$allFeed = new Subject();\n  }\n  get AllFeedObservable() {\n    return this.$allFeed;\n  }\n  startConnection() {\n    return new Promise((resolve, reject) => {\n      this.hubConnection = new HubConnectionBuilder().withUrl(environment.apiUrl + \"/hub\", {\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets\n      }).build();\n      this.hubConnection.start().then(() => {\n        console.log(\"connection established\");\n        return resolve(true);\n      }).catch(err => {\n        console.log(\"error occured\" + err);\n        reject(err);\n      });\n    });\n  }\n  listenToAllFeeds() {\n    this.hubConnection.on(\"TrackInfo\", data => {\n      this.$allFeed.next(data);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}