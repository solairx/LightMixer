{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/common/http\";\nfunction ScenesComponent_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ScenesComponent_table_1_tr_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const scene_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(scene_r3.name);\n  }\n}\nfunction ScenesComponent_table_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 2)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Name\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"tbody\");\n    i0.ɵɵtemplate(6, ScenesComponent_table_1_tr_6_Template, 3, 1, \"tr\", 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.scenes);\n  }\n}\nexport class ScenesComponent {\n  constructor(service) {\n    this.scenes = [];\n    service.scenePromise.then(model => {\n      this.scenes = model;\n    });\n    /*this.scenes = service.scenes.getValue();\r\n    service.scenes.subscribe({\r\n      next: (v) => this.scenes = v,\r\n    });*/\n  }\n}\n\nScenesComponent.ɵfac = function ScenesComponent_Factory(t) {\n  return new (t || ScenesComponent)(i0.ɵɵdirectiveInject(ScenesService));\n};\nScenesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScenesComponent,\n  selectors: [[\"scenes\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function ScenesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ScenesComponent_p_0_Template, 3, 0, \"p\", 0);\n      i0.ɵɵtemplate(1, ScenesComponent_table_1_Template, 7, 1, \"table\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !(ctx.scenes == null ? null : ctx.scenes.length));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.scenes.length);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf],\n  encapsulation: 2\n});\nexport class ScenesService {\n  constructor(http) {\n    this.scenes = new BehaviorSubject([]);\n    this.scenePromise = new Promise((resolved, rejected) => {\n      http.get(environment.apiUrl + 'scenes').subscribe(result => {\n        resolved(result);\n        this.scenes.next(result);\n      }, error => console.error(error));\n    });\n    /*this.client = http;\r\n    http.get<SceneModel[]>(environment.apiUrl + 'scenes')\r\n      .subscribe(result => {\r\n        this.scenes.next(result);\r\n      }, error => console.error(error));*/\n  }\n}\n\nScenesService.ɵfac = function ScenesService_Factory(t) {\n  return new (t || ScenesService)(i0.ɵɵinject(i2.HttpClient));\n};\nScenesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ScenesService,\n  factory: ScenesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,eAAe,QAAiB,MAAM;;;;;;ICD/CC,yBAA2B;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAS1CA,0BAAiC;IAC3BA,YAAgB;IAAAA,iBAAK;;;;IAArBA,eAAgB;IAAhBA,mCAAgB;;;;;IAR1BA,gCAAsF;IAG5EA,oBAAI;IAAAA,iBAAK;IAGjBA,6BAAO;IACLA,sEAEK;IACPA,iBAAQ;;;;IAHgBA,eAAS;IAATA,uCAAS;;;ADCnC,OAAM,MAAOC,eAAe;EAG1BC,YAAYC,OAAsB;IAF3B,WAAM,GAAiB,EAAE;IAG9BA,OAAO,CAACC,YAAY,CAACC,IAAI,CAAEC,KAAK,IAAI;MAClC,IAAI,CAACC,MAAM,GAAGD,KAAK;IACrB,CAAC,CAAC;IACF;;;;EAIF;;;AAXWL,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAO;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV5BZ,4DAAkD;MAElDA,oEAWQ;;;MAbJA,uEAAqB;MAEwCA,eAAmB;MAAnBA,wCAAmB;;;;;;ADuBpF,OAAM,MAAOa,aAAa;EAOxBX,YAAYY,IAAgB;IALrB,WAAM,GAAG,IAAIf,eAAe,CAAe,EAAE,CAAC;IAMnD,IAAI,CAACK,YAAY,GAAG,IAAIW,OAAO,CAAe,CAACC,QAAQ,EAAEC,QAAQ,KAAI;MACnEH,IAAI,CAACI,GAAG,CAAepB,WAAW,CAACqB,MAAM,GAAG,QAAQ,CAAC,CAClDC,SAAS,CAACC,MAAM,IAAG;QAClBL,QAAQ,CAACK,MAAM,CAAC;QAChB,IAAI,CAACd,MAAM,CAACe,IAAI,CAACD,MAAM,CAAC;MAC1B,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC;IACF;;;;;EAKF;;;AApBWV,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAY,SAAbZ,aAAa;EAAAa,YADA;AAAM","names":["environment","BehaviorSubject","i0","ScenesComponent","constructor","service","scenePromise","then","model","scenes","selectors","decls","vars","consts","template","ScenesService","http","Promise","resolved","rejected","get","apiUrl","subscribe","result","next","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\scenes\\scenes.component.ts","C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\scenes\\scenes.component.html"],"sourcesContent":["import { Component, Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'scenes',\r\n  templateUrl: './scenes.component.html'\r\n})\r\nexport class ScenesComponent {\r\n  public scenes: SceneModel[] = [];\r\n\r\n  constructor(service: ScenesService) {\r\n    service.scenePromise.then((model) => {\r\n      this.scenes = model;\r\n    });\r\n    /*this.scenes = service.scenes.getValue();\r\n    service.scenes.subscribe({\r\n      next: (v) => this.scenes = v,\r\n    });*/\r\n  }\r\n\r\n}\r\n@Injectable({ providedIn: 'root' })\r\nexport class ScenesService {\r\n\r\n  public scenes = new BehaviorSubject<SceneModel[]>([]);\r\n  //private client: HttpClient;\r\n  public scenePromise: Promise<SceneModel[]>\r\n\r\n\r\n  constructor(http: HttpClient) {\r\n    this.scenePromise = new Promise<SceneModel[]>((resolved, rejected) => {\r\n      http.get<SceneModel[]>(environment.apiUrl + 'scenes')\r\n        .subscribe(result => {\r\n          resolved(result);\r\n          this.scenes.next(result);\r\n        }, error => console.error(error));\r\n    })\r\n    /*this.client = http;\r\n    http.get<SceneModel[]>(environment.apiUrl + 'scenes')\r\n      .subscribe(result => {\r\n        this.scenes.next(result);\r\n      }, error => console.error(error));*/\r\n  }\r\n\r\n  \r\n\r\n}\r\n\r\n\r\n\r\ninterface SceneModel {\r\n\r\n  name: string;\r\n}\r\n","\r\n\r\n<p *ngIf=\"!scenes?.length\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"scenes.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>Name</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let scene of scenes\">\r\n      <td>{{ scene.name }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}