{"ast":null,"code":"import { SignalrService } from './SignalrService';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../scenes/scenes.component\";\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.scenes = [];\n    this.IsBeat = false;\n    this.BeatColor = '#F44336';\n    this.NonBeatColor = '#000000';\n    this.Color = '#000000';\n    this.TrackName = 'NA';\n    http.get(environment.apiUrl + 'scenes').subscribe(result => {\n      this.scenes = result;\n    }, error => console.error(error));\n    var signalR = new SignalrService();\n    signalR.startConnection().then(() => {\n      signalR.listenToAllFeeds();\n    });\n    const subscriber = {\n      next: trackInfo => {\n        this.ProcessNewTrackInfo(trackInfo);\n      },\n      error: function (err) {\n        console.log('Error');\n      },\n      complete: function () {\n        console.log('Done');\n      }\n    };\n    this.allFeedSubscription = signalR.AllFeedObservable.subscribe(subscriber);\n  }\n  ProcessNewTrackInfo(trackInfo) {\n    console.log('Received TrackInfo:', trackInfo);\n    this.IsBeat = trackInfo.isBeat;\n    if (trackInfo.trackInfo != this.TrackName) {\n      this.TrackName = trackInfo.trackInfo;\n    }\n    if (this.IsBeat) {\n      this.Color = this.BeatColor;\n    } else {\n      this.Color = this.NonBeatColor;\n    }\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[2, \"height\", \"25px\", \"width\", \"25px\"], [\"id\", \"tableLabel\", \"back\", \"\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"h1\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"scenes\");\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"background-color\", ctx.Color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.TrackName);\n    }\n  },\n  dependencies: [i2.ScenesComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAGA,SAASA,cAAc,QAAmB,kBAAkB;AAC5D,SAASC,WAAW,QAAQ,gCAAgC;;;;AAS5D,OAAM,MAAOC,kBAAkB;EAS7BC,YAAYC,IAAgB,EAAsBC,OAAe;IAR1D,WAAM,GAAiB,EAAE;IAEhC,WAAM,GAAY,KAAK;IACvB,cAAS,GAAG,SAAS;IACrB,iBAAY,GAAG,SAAS;IACxB,UAAK,GAAG,SAAS;IACjB,cAAS,GAAG,IAAI;IAIdD,IAAI,CAACE,GAAG,CAAeL,WAAW,CAACM,MAAM,GAAG,QAAQ,CAAC,CAClDC,SAAS,CAACC,MAAM,IAAG;MACpB,IAAI,CAACC,MAAM,GAAGD,MAAM;IACtB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IAEjC,IAAIE,OAAO,GAAG,IAAIb,cAAc,EAAE;IAClCa,OAAO,CAACC,eAAe,EAAE,CAACC,IAAI,CAAC,MAAK;MAClCF,OAAO,CAACG,gBAAgB,EAAE;IAC5B,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAiC;MAC/CC,IAAI,EAAGC,SAAoB,IAAI;QAC7B,IAAI,CAACC,mBAAmB,CAACD,SAAS,CAAC;MACrC,CAAC;MACDR,KAAK,EAAE,UAAUU,GAAQ;QACvBT,OAAO,CAACU,GAAG,CAAC,OAAO,CAAC;MACtB,CAAC;MACDC,QAAQ,EAAE;QACRX,OAAO,CAACU,GAAG,CAAC,MAAM,CAAC;MACrB;KACD;IAED,IAAI,CAACE,mBAAmB,GAAGX,OAAO,CAACY,iBAAiB,CACjDjB,SAAS,CAACS,UAAU,CAAC;EAE1B;EAEUG,mBAAmB,CAACD,SAAoB;IAC5CP,OAAO,CAACU,GAAG,CAAC,qBAAqB,EAAEH,SAAS,CAAC;IAC7C,IAAI,CAACO,MAAM,GAAGP,SAAS,CAACQ,MAAM;IAC9B,IAAIR,SAAS,CAACA,SAAS,IAAI,IAAI,CAACS,SAAS,EAAE;MACvC,IAAI,CAACA,SAAS,GAAGT,SAAS,CAACA,SAAS;;IAExC,IAAI,IAAI,CAACO,MAAM,EAAE;MACb,IAAI,CAACG,KAAK,GAAG,IAAI,CAACC,SAAS;KAC9B,MACI;MACD,IAAI,CAACD,KAAK,GAAG,IAAI,CAACE,YAAY;;EAEtC;;AAlDS7B,kBAAkB;mBAAlBA,kBAAkB,4DASS,UAAU;AAAA;AATrCA,kBAAkB;QAAlBA,kBAAkB;EAAA8B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb/BC,yBACM;MACNA,6BAAyB;MAAAA,YAAa;MAAAA,iBAAK;MAC3CA,yBAAiB;;;MAHmBA,6CAAgC;MAE3CA,eAAa;MAAbA,mCAAa","names":["SignalrService","environment","FetchDataComponent","constructor","http","baseUrl","get","apiUrl","subscribe","result","scenes","error","console","signalR","startConnection","then","listenToAllFeeds","subscriber","next","trackInfo","ProcessNewTrackInfo","err","log","complete","allFeedSubscription","AllFeedObservable","IsBeat","isBeat","TrackName","Color","BeatColor","NonBeatColor","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts","C:\\Project\\DmxLightV2\\LightMixerAngular\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html"],"sourcesContent":["import { Component,  Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IStreamSubscriber } from '@microsoft/signalr';\r\nimport { SignalrService, TrackInfo } from './SignalrService';\r\nimport { environment } from '../../environments/environment';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public scenes: SceneModel[] = [];\r\n  allFeedSubscription: any;\r\n  IsBeat: boolean = false;\r\n  BeatColor = '#F44336';\r\n  NonBeatColor = '#000000';\r\n  Color = '#000000'\r\n  TrackName = 'NA'\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    \r\n    http.get<SceneModel[]>(environment.apiUrl + 'scenes')\r\n      .subscribe(result => {\r\n      this.scenes = result;\r\n    }, error => console.error(error));\r\n\r\n    var signalR = new SignalrService();\r\n    signalR.startConnection().then(() => {\r\n      signalR.listenToAllFeeds();\r\n    });\r\n\r\n    const subscriber: IStreamSubscriber<TrackInfo> = {\r\n      next: (trackInfo: TrackInfo) => {\r\n        this.ProcessNewTrackInfo(trackInfo);\r\n      },\r\n      error: function (err: any): void {\r\n        console.log('Error');\r\n      },\r\n      complete: function (): void {\r\n        console.log('Done');\r\n      }\r\n    };\r\n\r\n    this.allFeedSubscription = signalR.AllFeedObservable\r\n      .subscribe(subscriber);\r\n\r\n  }\r\n\r\n    private ProcessNewTrackInfo(trackInfo: TrackInfo) {\r\n        console.log('Received TrackInfo:', trackInfo);\r\n        this.IsBeat = trackInfo.isBeat;\r\n        if (trackInfo.trackInfo != this.TrackName) {\r\n            this.TrackName = trackInfo.trackInfo;\r\n        }\r\n        if (this.IsBeat) {\r\n            this.Color = this.BeatColor;\r\n        }\r\n        else {\r\n            this.Color = this.NonBeatColor;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SceneModel {\r\n\r\n  name: string;\r\n}\r\n","<div style=\"height:25px;width:25px\" [style.background-color]=\"Color\">\r\n</div>\r\n<h1 id=\"tableLabel\" back>{{TrackName}}</h1>\r\n<scenes></scenes>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}