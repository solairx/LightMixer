//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace LightMixerApp.LightServer {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MovingHeadFixture.Program", Namespace="http://schemas.datacontract.org/2004/07/LightMixer.Model.Fixture")]
    public enum MovingHeadFixtureProgram : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disable = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto1 = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto2 = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto3 = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto4 = 60,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto5 = 72,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto6 = 90,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto7 = 105,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto8 = 120,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto1 = 135,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto2 = 150,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto3 = 165,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto4 = 180,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto5 = 195,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto6 = 211,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto7 = 226,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SoundAuto8 = 255,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MovingHeadFixture.Gobo", Namespace="http://schemas.datacontract.org/2004/07/LightMixer.Model.Fixture")]
    public enum MovingHeadFixtureGobo : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Open = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FloyerSpiral = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Spiral = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TriangleSpiral = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HearExplosion = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TriangleSpiral2 = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Star = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpinningArrow = 59,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SquareSpiral = 68,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Floyer = 76,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ColorMode", Namespace="http://schemas.datacontract.org/2004/07/LaserDisplay")]
    public enum ColorMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hard = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smooth = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LaserDataContract", Namespace="http://schemas.datacontract.org/2004/07/LightMixer.Model.Service")]
    public partial class LaserDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoChangeEventField;
        
        private bool AutoChangeEventLaserField;
        
        private int AutoMixDelayField;
        
        private bool BlueField;
        
        private bool GreenField;
        
        private LightMixerApp.LightServer.ColorMode LaserColorModeField;
        
        private bool LaserPauseField;
        
        private int LaserSpeedAdjField;
        
        private int LaserSpeedRatioField;
        
        private string LedCurrentEventIDField;
        
        private bool ManualBeatField;
        
        private bool ManualBeatOnlyField;
        
        private bool OnBeatField;
        
        private bool OnBeatReverseField;
        
        private bool RedField;
        
        private bool UseBeatTurnOffField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoChangeEvent {
            get {
                return this.AutoChangeEventField;
            }
            set {
                if ((this.AutoChangeEventField.Equals(value) != true)) {
                    this.AutoChangeEventField = value;
                    this.RaisePropertyChanged("AutoChangeEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoChangeEventLaser {
            get {
                return this.AutoChangeEventLaserField;
            }
            set {
                if ((this.AutoChangeEventLaserField.Equals(value) != true)) {
                    this.AutoChangeEventLaserField = value;
                    this.RaisePropertyChanged("AutoChangeEventLaser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AutoMixDelay {
            get {
                return this.AutoMixDelayField;
            }
            set {
                if ((this.AutoMixDelayField.Equals(value) != true)) {
                    this.AutoMixDelayField = value;
                    this.RaisePropertyChanged("AutoMixDelay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Blue {
            get {
                return this.BlueField;
            }
            set {
                if ((this.BlueField.Equals(value) != true)) {
                    this.BlueField = value;
                    this.RaisePropertyChanged("Blue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Green {
            get {
                return this.GreenField;
            }
            set {
                if ((this.GreenField.Equals(value) != true)) {
                    this.GreenField = value;
                    this.RaisePropertyChanged("Green");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LightMixerApp.LightServer.ColorMode LaserColorMode {
            get {
                return this.LaserColorModeField;
            }
            set {
                if ((this.LaserColorModeField.Equals(value) != true)) {
                    this.LaserColorModeField = value;
                    this.RaisePropertyChanged("LaserColorMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LaserPause {
            get {
                return this.LaserPauseField;
            }
            set {
                if ((this.LaserPauseField.Equals(value) != true)) {
                    this.LaserPauseField = value;
                    this.RaisePropertyChanged("LaserPause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LaserSpeedAdj {
            get {
                return this.LaserSpeedAdjField;
            }
            set {
                if ((this.LaserSpeedAdjField.Equals(value) != true)) {
                    this.LaserSpeedAdjField = value;
                    this.RaisePropertyChanged("LaserSpeedAdj");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LaserSpeedRatio {
            get {
                return this.LaserSpeedRatioField;
            }
            set {
                if ((this.LaserSpeedRatioField.Equals(value) != true)) {
                    this.LaserSpeedRatioField = value;
                    this.RaisePropertyChanged("LaserSpeedRatio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LedCurrentEventID {
            get {
                return this.LedCurrentEventIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LedCurrentEventIDField, value) != true)) {
                    this.LedCurrentEventIDField = value;
                    this.RaisePropertyChanged("LedCurrentEventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ManualBeat {
            get {
                return this.ManualBeatField;
            }
            set {
                if ((this.ManualBeatField.Equals(value) != true)) {
                    this.ManualBeatField = value;
                    this.RaisePropertyChanged("ManualBeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ManualBeatOnly {
            get {
                return this.ManualBeatOnlyField;
            }
            set {
                if ((this.ManualBeatOnlyField.Equals(value) != true)) {
                    this.ManualBeatOnlyField = value;
                    this.RaisePropertyChanged("ManualBeatOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnBeat {
            get {
                return this.OnBeatField;
            }
            set {
                if ((this.OnBeatField.Equals(value) != true)) {
                    this.OnBeatField = value;
                    this.RaisePropertyChanged("OnBeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnBeatReverse {
            get {
                return this.OnBeatReverseField;
            }
            set {
                if ((this.OnBeatReverseField.Equals(value) != true)) {
                    this.OnBeatReverseField = value;
                    this.RaisePropertyChanged("OnBeatReverse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Red {
            get {
                return this.RedField;
            }
            set {
                if ((this.RedField.Equals(value) != true)) {
                    this.RedField = value;
                    this.RaisePropertyChanged("Red");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseBeatTurnOff {
            get {
                return this.UseBeatTurnOffField;
            }
            set {
                if ((this.UseBeatTurnOffField.Equals(value) != true)) {
                    this.UseBeatTurnOffField = value;
                    this.RaisePropertyChanged("UseBeatTurnOff");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DmxDataContract", Namespace="http://schemas.datacontract.org/2004/07/LightMixer.Model.Service")]
    public partial class DmxDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoChangeColorOnBeatField;
        
        private bool AutoChangeGoboField;
        
        private bool AutoChangeProgramField;
        
        private double BeatRepeatField;
        
        private byte BlueField;
        
        private string CurrentBoothEffectField;
        
        private string CurrentLedEffectField;
        
        private string CurrentMovingHeadEffectField;
        
        private LightMixerApp.LightServer.MovingHeadFixtureGobo CurrentMovingHeadGoboField;
        
        private LightMixerApp.LightServer.MovingHeadFixtureProgram CurrentMovingHeadProgramField;
        
        private byte GreenField;
        
        private double MaxLightFlashIntesityField;
        
        private double MaxLightIntesityField;
        
        private double MaxLightIntesityMovingHeadField;
        
        private double MaxSpeedField;
        
        private byte RedField;
        
        private int SecondBetweenGoboChangeField;
        
        private int SecondBetweenProgramChangeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoChangeColorOnBeat {
            get {
                return this.AutoChangeColorOnBeatField;
            }
            set {
                if ((this.AutoChangeColorOnBeatField.Equals(value) != true)) {
                    this.AutoChangeColorOnBeatField = value;
                    this.RaisePropertyChanged("AutoChangeColorOnBeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoChangeGobo {
            get {
                return this.AutoChangeGoboField;
            }
            set {
                if ((this.AutoChangeGoboField.Equals(value) != true)) {
                    this.AutoChangeGoboField = value;
                    this.RaisePropertyChanged("AutoChangeGobo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoChangeProgram {
            get {
                return this.AutoChangeProgramField;
            }
            set {
                if ((this.AutoChangeProgramField.Equals(value) != true)) {
                    this.AutoChangeProgramField = value;
                    this.RaisePropertyChanged("AutoChangeProgram");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BeatRepeat {
            get {
                return this.BeatRepeatField;
            }
            set {
                if ((this.BeatRepeatField.Equals(value) != true)) {
                    this.BeatRepeatField = value;
                    this.RaisePropertyChanged("BeatRepeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Blue {
            get {
                return this.BlueField;
            }
            set {
                if ((this.BlueField.Equals(value) != true)) {
                    this.BlueField = value;
                    this.RaisePropertyChanged("Blue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentBoothEffect {
            get {
                return this.CurrentBoothEffectField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentBoothEffectField, value) != true)) {
                    this.CurrentBoothEffectField = value;
                    this.RaisePropertyChanged("CurrentBoothEffect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentLedEffect {
            get {
                return this.CurrentLedEffectField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentLedEffectField, value) != true)) {
                    this.CurrentLedEffectField = value;
                    this.RaisePropertyChanged("CurrentLedEffect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentMovingHeadEffect {
            get {
                return this.CurrentMovingHeadEffectField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentMovingHeadEffectField, value) != true)) {
                    this.CurrentMovingHeadEffectField = value;
                    this.RaisePropertyChanged("CurrentMovingHeadEffect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LightMixerApp.LightServer.MovingHeadFixtureGobo CurrentMovingHeadGobo {
            get {
                return this.CurrentMovingHeadGoboField;
            }
            set {
                if ((this.CurrentMovingHeadGoboField.Equals(value) != true)) {
                    this.CurrentMovingHeadGoboField = value;
                    this.RaisePropertyChanged("CurrentMovingHeadGobo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LightMixerApp.LightServer.MovingHeadFixtureProgram CurrentMovingHeadProgram {
            get {
                return this.CurrentMovingHeadProgramField;
            }
            set {
                if ((this.CurrentMovingHeadProgramField.Equals(value) != true)) {
                    this.CurrentMovingHeadProgramField = value;
                    this.RaisePropertyChanged("CurrentMovingHeadProgram");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Green {
            get {
                return this.GreenField;
            }
            set {
                if ((this.GreenField.Equals(value) != true)) {
                    this.GreenField = value;
                    this.RaisePropertyChanged("Green");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxLightFlashIntesity {
            get {
                return this.MaxLightFlashIntesityField;
            }
            set {
                if ((this.MaxLightFlashIntesityField.Equals(value) != true)) {
                    this.MaxLightFlashIntesityField = value;
                    this.RaisePropertyChanged("MaxLightFlashIntesity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxLightIntesity {
            get {
                return this.MaxLightIntesityField;
            }
            set {
                if ((this.MaxLightIntesityField.Equals(value) != true)) {
                    this.MaxLightIntesityField = value;
                    this.RaisePropertyChanged("MaxLightIntesity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxLightIntesityMovingHead {
            get {
                return this.MaxLightIntesityMovingHeadField;
            }
            set {
                if ((this.MaxLightIntesityMovingHeadField.Equals(value) != true)) {
                    this.MaxLightIntesityMovingHeadField = value;
                    this.RaisePropertyChanged("MaxLightIntesityMovingHead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Red {
            get {
                return this.RedField;
            }
            set {
                if ((this.RedField.Equals(value) != true)) {
                    this.RedField = value;
                    this.RaisePropertyChanged("Red");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SecondBetweenGoboChange {
            get {
                return this.SecondBetweenGoboChangeField;
            }
            set {
                if ((this.SecondBetweenGoboChangeField.Equals(value) != true)) {
                    this.SecondBetweenGoboChangeField = value;
                    this.RaisePropertyChanged("SecondBetweenGoboChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SecondBetweenProgramChange {
            get {
                return this.SecondBetweenProgramChangeField;
            }
            set {
                if ((this.SecondBetweenProgramChangeField.Equals(value) != true)) {
                    this.SecondBetweenProgramChangeField = value;
                    this.RaisePropertyChanged("SecondBetweenProgramChange");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LightServer.IRemoteLightService")]
    public interface IRemoteLightService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/MovingHeadProgram", ReplyAction="http://tempuri.org/IRemoteLightService/MovingHeadProgramResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LightMixerApp.LightServer.MovingHeadFixtureProgram>> MovingHeadProgramAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/MovingHeadGobo", ReplyAction="http://tempuri.org/IRemoteLightService/MovingHeadGoboResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LightMixerApp.LightServer.MovingHeadFixtureGobo>> MovingHeadGoboAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/LaserColorModeList", ReplyAction="http://tempuri.org/IRemoteLightService/LaserColorModeListResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LightMixerApp.LightServer.ColorMode>> LaserColorModeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/LedEffectCollection", ReplyAction="http://tempuri.org/IRemoteLightService/LedEffectCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> LedEffectCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/MovingHeadEffectCollection", ReplyAction="http://tempuri.org/IRemoteLightService/MovingHeadEffectCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> MovingHeadEffectCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/BoothEffectCollection", ReplyAction="http://tempuri.org/IRemoteLightService/BoothEffectCollectionResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> BoothEffectCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/LaserEffectList", ReplyAction="http://tempuri.org/IRemoteLightService/LaserEffectListResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> LaserEffectListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/UpdateLaser", ReplyAction="http://tempuri.org/IRemoteLightService/UpdateLaserResponse")]
        System.Threading.Tasks.Task UpdateLaserAsync(LightMixerApp.LightServer.LaserDataContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/GetLaserStatus", ReplyAction="http://tempuri.org/IRemoteLightService/GetLaserStatusResponse")]
        System.Threading.Tasks.Task<LightMixerApp.LightServer.LaserDataContract> GetLaserStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/UpdateDmx", ReplyAction="http://tempuri.org/IRemoteLightService/UpdateDmxResponse")]
        System.Threading.Tasks.Task UpdateDmxAsync(LightMixerApp.LightServer.DmxDataContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteLightService/GetDmxStatus", ReplyAction="http://tempuri.org/IRemoteLightService/GetDmxStatusResponse")]
        System.Threading.Tasks.Task<LightMixerApp.LightServer.DmxDataContract> GetDmxStatusAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteLightServiceChannel : LightMixerApp.LightServer.IRemoteLightService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteLightServiceClient : System.ServiceModel.ClientBase<LightMixerApp.LightServer.IRemoteLightService>, LightMixerApp.LightServer.IRemoteLightService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RemoteLightServiceClient() : 
                base(RemoteLightServiceClient.GetDefaultBinding(), RemoteLightServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRemoteLightService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RemoteLightServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(RemoteLightServiceClient.GetBindingForEndpoint(endpointConfiguration), RemoteLightServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RemoteLightServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RemoteLightServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RemoteLightServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RemoteLightServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RemoteLightServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LightMixerApp.LightServer.MovingHeadFixtureProgram>> MovingHeadProgramAsync() {
            return base.Channel.MovingHeadProgramAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LightMixerApp.LightServer.MovingHeadFixtureGobo>> MovingHeadGoboAsync() {
            return base.Channel.MovingHeadGoboAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LightMixerApp.LightServer.ColorMode>> LaserColorModeListAsync() {
            return base.Channel.LaserColorModeListAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> LedEffectCollectionAsync() {
            return base.Channel.LedEffectCollectionAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> MovingHeadEffectCollectionAsync() {
            return base.Channel.MovingHeadEffectCollectionAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> BoothEffectCollectionAsync() {
            return base.Channel.BoothEffectCollectionAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> LaserEffectListAsync() {
            return base.Channel.LaserEffectListAsync();
        }
        
        public System.Threading.Tasks.Task UpdateLaserAsync(LightMixerApp.LightServer.LaserDataContract contract) {
            return base.Channel.UpdateLaserAsync(contract);
        }
        
        public System.Threading.Tasks.Task<LightMixerApp.LightServer.LaserDataContract> GetLaserStatusAsync() {
            return base.Channel.GetLaserStatusAsync();
        }
        
        public System.Threading.Tasks.Task UpdateDmxAsync(LightMixerApp.LightServer.DmxDataContract contract) {
            return base.Channel.UpdateDmxAsync(contract);
        }
        
        public System.Threading.Tasks.Task<LightMixerApp.LightServer.DmxDataContract> GetDmxStatusAsync() {
            return base.Channel.GetDmxStatusAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRemoteLightService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRemoteLightService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8088/LightMixer/RemoteLightService/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return RemoteLightServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRemoteLightService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return RemoteLightServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRemoteLightService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IRemoteLightService,
        }
    }
}
